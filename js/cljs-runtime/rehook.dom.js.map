{"version":3,"sources":["rehook/dom.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/symbol?","cljs.core/map?","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep-impl","cljs.core/any?","var_args","G__37713","rehook.dom/eval-hiccup","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq37702","G__37705","cljs.core/first","cljs.core/next","G__37706","G__37707","self__4717__auto__","$","e","cljs.core/vector?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","props","children","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","x","G__37726","rehook.dom/compile-hiccup","seq37722","G__37723","G__37724","G__37725","cljs.core/List","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/list","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns rehook.dom\n  (:require [clojure.spec.alpha :as s]))\n\n(s/def ::arg\n  (s/or :symbol? symbol?\n        :map?    map?))\n\n(s/def ::args\n  (s/or\n   :two-arity   (s/tuple ::arg ::arg)\n   :three-arity (s/tuple ::arg ::arg symbol?)))\n\n(s/def ::defui\n  (s/cat :name symbol?\n         :args ::args\n         :body (s/* any?)))\n\n(s/def ::ui\n  (s/cat :args ::args\n         :body (s/* any?)))\n\n(s/def ::html\n  (s/cat :render-fn symbol?\n         :component any?))\n\n(defn eval-hiccup\n  ([$ e]\n   (if (vector? e)\n     (apply eval-hiccup $ e)\n     ($ e)))\n  ([$ e props]\n   ($ e props))\n  ([$ e props & children]\n   (apply $ e props (keep (fn [x]\n                            (if (vector? x)\n                              (apply eval-hiccup $ x)\n                              x))\n                          children))))\n\n(defn compile-hiccup\n  ([$ e]\n   (list $ e))\n  ([$ e props]\n   (list $ e props))\n  ([$ e props & children]\n   (apply list $ e props (keep (fn [x]\n                                 (cond\n                                   (vector? x)\n                                   (apply compile-hiccup $ x)\n\n                                   (or (nil? x) (string? x) (number? x))\n                                   x\n\n                                   :else `(eval-hiccup ~$ ~x)))\n                              children))))\n\n#?(:clj\n   (defmacro html [$ component]\n     (s/assert* ::html [$ component])\n     (if (vector? component)\n       `~(apply compile-hiccup $ component)\n       `(apply eval-hiccup ~$ ~component))))\n\n#?(:clj\n   (defmacro defui\n     [name [ctx props $?] & body]\n     (if $?\n       (do (s/assert* ::defui [name [ctx props $?] body])\n           `(def ~name\n              ^{:rehook/component true\n                :rehook/name      ~(str name)}\n              (fn ~(gensym name) [ctx# $#]\n                (let [~ctx ctx#\n                      ~$? $#]\n                  (fn ~(gensym name) [props#]\n                    (let [~props props#]\n                      ~@body))))))\n\n       (do (s/assert* ::defui [name [ctx props] body])\n           (let [$ (gensym '$)\n                 effects (butlast body)\n                 hiccup (last body)]\n             `(def ~name\n                ^{:rehook/component true\n                  :rehook/name      ~(str name)}\n                (fn ~(gensym name) [ctx# $#]\n                  (let [~ctx ctx#\n                        ~$ $#]\n                    (fn ~(gensym name) [props#]\n                      (let [~props props#]\n                        ~@effects\n                        (html ~$ ~hiccup)))))))))))\n\n#?(:clj\n   (defmacro ui\n     [[ctx props $?] & body]\n     (if $?\n       (let [id (gensym \"ui\")]\n         (s/assert* ::ui [[ctx props $?] body])\n         `(with-meta\n           (fn ~id [ctx# $#]\n             (let [~ctx ctx#\n                   ~$? $#]\n               (fn ~(gensym id) [props#]\n                 (let [~props props#]\n                   ~@body))))\n           {:rehook/component true\n            :rehook/name      ~(str id)}))\n\n       (let [id      (gensym \"ui\")\n             $       (gensym '$)\n             effects (butlast body)\n             hiccup  (last body)]\n         (s/assert* ::ui [[ctx props] body])\n         `(with-meta\n           (fn ~id [ctx# $#]\n             (let [~ctx ctx#\n                   ~$ $#]\n               (fn ~(gensym id) [props#]\n                 (let [~props props#]\n                   ~@effects\n                   (html ~$ ~hiccup)))))\n           {:rehook/component true\n            :rehook/name      ~(str id)})))))\n\n"]}