{"version":3,"sources":["rehook/test.cljs"],"mappings":"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","names":["rehook.test/ctx-transformer","ctx","elem","p1__51747#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","rehook.util/display-name","rehook.test/use-state","scene-state","local-state","next-scene","component-id","state-id","initial-value","p1__51748#","curr-state-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","current-value","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__51749","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","rehook.test/use-effect","p__51755","vec__51756","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq51750","G__51751","cljs.core/first","cljs.core/next","G__51752","G__51753","G__51754","self__4717__auto__","effects","effect-id","f","deps","curr-effect-id","rehook.test/handle-type","next-elements","e","$","args","raw-args","children","cljs.core/Keyword","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","rehook.util/rehook-component?","fexpr__51759","cljs.core/fn?","temp__5733__auto__","id","elem-meta","G__51772","rehook.test/bootstrap","args-arr__4751__auto__","argseq__4752__auto__","seq51761","G__51762","G__51763","G__51764","G__51765","G__51766","G__51767","G__51768","G__51769","G__51770","G__51771","ctx-f","props-f","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","use-effect-orig-val__51773","use-state-orig-val__51774","use-effect-temp-val__51775","use-state-temp-val__51776","rehook.core/use-effect","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","rehook.core/use-state","cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic","rehook.test/unmount!","scene","seq__51777","cljs.core/seq","chunk__51778","count__51779","i__51780","vec__51787","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__51790","_","umount-f","rehook.test/eval-effect?","ticks","prev-deps","cljs.core/empty?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","rehook.test/mount-scene","prev-scene","curr-tick","curr-effects","G__51793","cljs.core/deref","prev-effects","G__51794","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__51801","vec__51802","map__51805","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__51795","vec__51796","map__51799","rehook.test/init","scenes","next-local-state","cljs.core/update","timeline","next-effects","actions","render","rehook.test.bootstrap.cljs$core$IFn$_invoke$arity$9","G__51808","rehook.test/mount!","js/Error","rehook.test.mount_BANG_.cljs$core$IFn$_invoke$arity$2","map__51809","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","rehook.test/*report*","rehook.test/*scene*","js/rehook","js/rehook.test","js/rehook.test.registry","rehook.test/registry","rehook.test/clear-registry!","cljs.core/reset!","G__51812","rehook.test/children","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","rehook.test.children.cljs$core$IFn$_invoke$arity$2","G__51813","G__51815","rehook.test/get-prop","k","rehook.test.get_prop.cljs$core$IFn$_invoke$arity$3","G__51816","G__51817","G__51819","rehook.test/invoke-prop","rehook.test.invoke_prop.cljs$core$IFn$_invoke$arity$4","js/console.warn","rehook.test/main","js/console.log"],"sourcesContent":["(ns rehook.test\n  (:require [rehook.core :as rehook]\n            [rehook.util :as util]\n            [cljs.test]))\n\n(defn- ctx-transformer [ctx elem]\n  (update ctx :rehook.test/id\n          #(if %\n             (conj % (util/display-name elem))\n             [(util/display-name elem)])))\n\n(defn- use-state\n  [scene-state local-state next-scene component-id state-id initial-value]\n  (let [curr-state-id (swap! state-id inc)\n        current-value (get local-state [component-id curr-state-id] initial-value)]\n    (swap! scene-state assoc [component-id curr-state-id]\n           {:current-value current-value\n            :initial-value initial-value})\n    [current-value #(when-not (= current-value %)\n                      (next-scene (assoc local-state [component-id curr-state-id] %)))]))\n\n(defn- use-effect\n  [effects component-id effect-id f & [deps]]\n  (let [curr-effect-id (swap! effect-id inc)]\n    (swap! effects assoc [component-id curr-effect-id]\n           {:deps  deps\n            :f     f})))\n\n(defn- handle-type\n  [next-elements e ctx $ args raw-args children]\n  (let [elem (cond\n               (keyword? e)               (into [e args] children)\n               ;; TODO: properly handle fragments...\n               (vector? e)                (into [:*] e)\n               (util/rehook-component? e) ((e ctx $) args)\n               (fn? e)                    (e args))]\n    (if-let [id (:rehook/id raw-args)]\n      (let [elem-meta {:e        e\n                       :args     raw-args\n                       :evaled   elem\n                       :children children}]\n        (swap! next-elements assoc id elem-meta)\n        elem)\n      elem)))\n\n(defn- bootstrap\n  ([next-elements next-scene scene-state effects local-state ctx ctx-f props-f e]\n   (bootstrap next-elements next-scene scene-state effects local-state ctx ctx-f props-f e {}))\n\n  ([next-elements next-scene scene-state effects local-state ctx ctx-f props-f e args & children]\n   (let [ctx          (ctx-transformer (ctx-f ctx e) e)\n         component-id (get args :key (:rehook.test/id ctx))\n         state-id     (atom 0)\n         effect-id    (atom 0)]\n\n     (with-redefs [rehook/use-effect (partial use-effect effects component-id effect-id)\n                   rehook/use-state  (partial use-state scene-state local-state next-scene component-id state-id)]\n\n       (let [$ (partial bootstrap next-elements next-scene scene-state effects local-state ctx ctx-f props-f)]\n         (handle-type next-elements e ctx $ (props-f args) args children))))))\n\n(defn unmount! [scene]\n  (doseq [[_ umount-f] (:evaled-effects scene)]\n    (umount-f)))\n\n(defn eval-effect? [ticks prev-deps deps]\n  (cond\n    (= 0 ticks)           true\n    (empty? deps)         true\n    (not= prev-deps deps) true\n    :else                 false))\n\n(defn mount-scene\n  [prev-scene scene]\n  (let [curr-tick    (:ticks prev-scene)\n        curr-effects (some-> scene :effects deref)\n        prev-effects (:effects prev-scene)]\n    {:render         (:render scene)\n     :effects        curr-effects\n     :ticks          (inc curr-tick)\n     :elements       (some-> scene :elements deref)\n     :evaled-effects (->> curr-effects\n                          (filter (fn [[id {:keys [deps]}]]\n                                    (let [prev-deps (get-in prev-effects [id :deps])]\n                                      (eval-effect? curr-tick prev-deps deps))))\n                          (map (fn [[id {:keys [f]}]]\n                                 [id (f)]))\n                          (into {}))}))\n\n(defn init\n  [ctx ctx-f props-f e]\n  (let [scenes (atom {:timeline []})]\n    (letfn [(next-scene [next-local-state]\n              (swap! scenes update :timeline\n                     (fn [timeline]\n                       (let [next-effects  (atom {})\n                             actions       (atom {})\n                             next-elements (atom {})\n                             scene-state   (atom {})\n                             render        (bootstrap next-elements next-scene scene-state next-effects\n                                                      next-local-state ctx ctx-f props-f e)]\n                         (conj timeline {:actions  actions\n                                         :render   render\n                                         :index    (count timeline)\n                                         :dom      #(do render)\n                                         :effects  next-effects\n                                         :state    scene-state\n                                         :elements next-elements})))))]\n      (next-scene {})\n      scenes)))\n\n(defn mount!\n  ([scenes]\n   (mount! scenes nil))\n  ([scenes scene]\n   (let [{:keys [timeline]} @scenes]\n     (reduce\n      (fn [prev-scene scene]\n        (unmount! prev-scene)\n        (mount-scene prev-scene scene))\n      {:ticks 0}\n      (drop (get scene :tick 0) timeline)))))\n\n(def ^:dynamic *report* nil)\n(def ^:dynamic *scene* nil)\n(defonce registry (atom {}))\n\n(defn clear-registry! []\n  (reset! registry {}))\n\n(defn children\n  ([id]\n   (when-not *scene*\n     (throw (ex-info \"rehook.test/children called outside of test\" {:id id})))\n   (children *scene* id))\n\n  ([scene id]\n   (-> scene :elements id :children)))\n\n(defn get-prop\n  ([id k]\n   (when-not *scene*\n     (throw (ex-info \"rehook.test/get-prop called outside of test\" {:id id :k k})))\n   (get-prop *scene* id k))\n\n  ([scene id k]\n   (-> scene :elements id :args k)))\n\n(defn invoke-prop\n  ([id k args]\n   (when-not *scene*\n     (throw (ex-info \"rehook.test/get-prop called outside of test\" {:id id :k k :args args})))\n   (invoke-prop *scene* id k args))\n\n  ([scene id k args]\n   (if-let [f (get-prop scene id k)]\n     (apply f args)\n     (js/console.warn \"No fn found for prop\" [id k]))))\n\n(defn main []\n  (js/console.log \"rehook.test ~~~ \u266a\u250f(\u30fbo\uff65)\u251b\u266a\"))"]}