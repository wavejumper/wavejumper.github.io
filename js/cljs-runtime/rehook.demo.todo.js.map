{"version":3,"sources":["rehook/demo/todo.cljs"],"mappings":"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","names":["rehook.demo.todo/add-todo","counter","todos","text","id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","rehook.demo.todo/toggle","cljs.core/update-in","cljs.core/not","rehook.demo.todo/save","title","cljs.core/assoc-in","rehook.demo.todo/delete","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","rehook.demo.todo/mmap","m","f","a","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/empty","rehook.demo.todo/complete-all","v","p1__50053#","cljs.core/map","rehook.demo.todo/clear-done","p1__50054#","cljs.core/remove","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","rehook.demo.todo/init","add-todo","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","rehook.demo.todo/new-system","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/sorted-map","todo-filter","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","rehook.demo.todo/todo-input","_","props","$","map__50059","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__50060","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","onSave","onStop","class","placeholder","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","val","setter","rehook.core/use-state","or__4131__auto__","stop","save","clojure.string/trim","cljs.core/empty?","G__50064","G__50065","p1__50056#","p1__50055#","G__50067","G__50066","rehook.demo.todo/todo-stats","events","map__50072","vec__50073","active","done","clear","filt","set-filt","rehook.core/use-atom-path","G__50077","G__50078","G__50079","G__50080","G__50081","G__50082","G__50083","G__50084","G__50085","G__50086","G__50087","ctx__39176__auto__","$__39177__auto__","props__39178__auto__","map__50070","map__50152","G__50088","G__50089","G__50090","G__50091","G__50092","G__50093","G__50094","G__50095","G__50096","G__50097","G__50098","G__50099","G__50100","G__50101","G__50102","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__50103","G__50104","G__50105","G__50106","G__50107","G__50108","G__50109","G__50110","G__50111","G__50112","G__50113","G__50114","G__50115","G__50116","G__50117","G__50118","G__50119","G__50120","G__50121","rehook.demo.todo/todo-item","ctx","map__50125","vec__50126","toggle","delete","editing","G__50130","G__50131","G__50132","G__50133","G__50134","G__50135","G__50136","G__50137","G__50138","G__50139","G__50140","G__50141","G__50142","G__50143","G__50144","G__50145","G__50146","G__50147","G__50148","p1__50122#","rehook.demo.todo/todo-app","vec__50154","vec__50157","rehook.core/use-atom","complete-all","items","cljs.core/vals","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/count","G__50160","G__50161","G__50162","G__50163","G__50164","G__50165","G__50166","G__50167","G__50168","G__50169","G__50170","G__50171","G__50172","G__50173","G__50174","G__50175","G__50176","cljs.core/not-empty","G__50177","G__50178","G__50179","G__50180","G__50181","G__50182","G__50183","G__50184","G__50185","G__50186","G__50187","G__50188","G__50189","G__50190","G__50191","filtered-items","G__50192","cljs.core/Keyword","js/Error","cljs.core/complement","cljs.core/identity","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","p1__50149#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__50193","G__50194","cljs.core/clj->js","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__50195","G__50196","G__50197","G__50198","G__50199","G__50200","G__50201","G__50202","G__50203","G__50204","G__50205","rehook.demo.todo/system","sys","fexpr__50206","rehook.demo.todo/main","rehook.dom.browser.bootstrap.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns rehook.demo.todo\n  (:require [rehook.core :as rehook]\n            [rehook.dom :refer-macros [defui]]\n            [rehook.dom.browser :as dom]))\n\n(defn add-todo [counter todos text]\n  (let [id (swap! counter inc)]\n    (swap! todos assoc id {:id id :title text :done false})))\n\n(defn toggle [todos id] (swap! todos update-in [id :done] not))\n(defn save [todos id title] (swap! todos assoc-in [id :title] title))\n(defn delete [todos id] (swap! todos dissoc id))\n\n(defn mmap [m f a] (->> m (f a) (into (empty m))))\n(defn complete-all [todos v] (swap! todos mmap map #(assoc-in % [1 :done] v)))\n(defn clear-done [todos]\n  (swap! todos mmap remove #(get-in % [1 :done])))\n\n(defn init [counter todos]\n  (let [add-todo (partial add-todo counter todos)]\n    (add-todo \"Rename Cloact to Reagent\")\n    (add-todo \"Add undo demo\")\n    (add-todo \"Make all rendering async\")\n    (add-todo \"Allow any arguments to component functions\")\n    (complete-all todos true)))\n\n(defn new-system []\n  (let [todos       (atom (sorted-map))\n        counter     (atom 0)\n        todo-filter (atom {:filter :all})]\n    {:todos       todos\n     :counter     counter\n     :todo-filter todo-filter\n     :events      {:add-todo     (partial add-todo counter todos)\n                   :complete-all (partial complete-all todos)\n                   :clear-done   (partial clear-done todos)\n                   :toggle       (partial toggle todos)\n                   :save         (partial save todos)\n                   :delete       (partial delete todos)}\n     :init #(init counter todos)}))\n\n(defui todo-input [_ props $]\n  (let [{:keys [title onSave onStop id class placeholder]} (js->clj props :keywordize-keys true)\n        [val setter] (rehook/use-state (or title \"\"))\n        stop #(do (setter \"\")\n                  (when onStop (onStop)))\n        save #(let [v (-> val str clojure.string/trim)]\n                (if-not (empty? v)\n                  (onSave v)\n                  (stop)))]\n    ($ :input {:type        \"text\"\n               :rehook/id   :todo-input\n               :value       val\n               :id          id\n               :className   class\n               :placeholder placeholder\n               :onBlur      save\n               :onChange    #(setter (-> % .-target .-value))\n               :onKeyDown   #(case (.-which %)\n                               13 (save)\n                               27 (stop)\n                               nil)})))\n\n(defui todo-stats [{:keys [todo-filter events]} props $]\n  (let [{:keys [active done]} (js->clj props :keywordize-keys true)\n        clear (:clear-done events)\n        [filt set-filt] (rehook/use-atom-path todo-filter [:filter])]\n    ($ :div {}\n       ($ :span {:id \"todo-count\"\n                 :rehook/id :items-left}\n          ($ :strong {} active) \" \" (case active 1 \"item\" \"items\") \" left\")\n       ($ :ul {:id \"filters\"}\n          ($ :li {}\n             ($ :a {:className   (if (= :all filt) \"selected\")\n                    :onClick #(set-filt :all)}\n                \"All\"))\n          ($ :li {}\n             ($ :a {:className   (if (= :done filt) \"selected\")\n                    :onClick #(set-filt :active)}\n                \"Active\"))\n          ($ :li {}\n             ($ :a {:className   (if (= :done filt) \"selected\")\n                    :onClick #(set-filt :done)}\n                \"Completed\")))\n       (when (pos? done)\n         ($ :button {:id        \"clear-completed\"\n                     :rehook/id :clear-completed\n                     :onClick   clear}\n            \"Clear completed \" done)))))\n\n(defui todo-item [ctx props $]\n  (let [{:keys [id done title]} (js->clj props :keywordize-keys true)\n        toggle (-> ctx :events :toggle)\n        delete (-> ctx :events :delete)\n        save   (-> ctx :events :save)\n        [editing setter] (rehook/use-state false)]\n\n    ($ :li {:className (str (if done \"completed \")\n                            (if editing \"editing\"))}\n       ($ :div {:className \"view\"}\n          ($ :input {:className \"toggle\"\n                     :type \"checkbox\"\n                     :checked done\n                     :onChange #(toggle id)})\n          ($ :label {:onDoubleClick #(setter true)}\n             title)\n          ($ :button {:className \"destroy\"\n                      :onClick #(delete id)}\n             \"Delete\")\n          (when editing\n            ($ todo-input {:className \"edit\"\n                           :title     title\n                           :onSave    #(save id %)\n                           :onStop    #(setter false)}))))))\n\n(defui todo-app\n  [{:keys [todo-filter todos] :as ctx} _ $]\n  (let [[filt _] (rehook/use-atom-path todo-filter [:filter])\n        [todos _] (rehook/use-atom todos)\n        complete-all (-> ctx :events :complete-all)\n        add-todo (-> ctx :events :add-todo)\n        items  (vals todos)\n        done   (->> items (filter :done) count)\n        active (- (count items) done)]\n\n    ($ :div {}\n       ($ :section {:id \"todoapp\"}\n          ($ :header {:id \"header\"}\n             ($ :h1 {} \"todos (rehook)\")\n             ($ todo-input {:id \"new-todo\"\n                            :placeholder \"What needs to be done?\"\n                            :onSave add-todo}))\n          (when (not-empty items)\n            ($ :div {}\n               ($ :section {:id \"main\"}\n                  ($ :input {:id       \"toggle-all\"\n                             :type     \"checkbox\"\n                             :checked  (zero? active)\n                             :onChange #(complete-all (pos? active))})\n                  ($ :label {:htmlFor \"toggle-all\"}\n                     \"Mark all as complete\")\n                  (let [filtered-items (filter (case filt\n                                                 :active (complement :done)\n                                                 :done :done\n                                                 :all identity)\n                                               items)]\n                    (apply $ :ul {:id \"todo-list\"}\n                           (map #($ todo-item (clj->js (assoc % :key (:id %))))\n                                filtered-items))))\n               ($ :footer {:id \"footer\"}\n                  ($ todo-stats {:active active\n                                 :done done}))))\n\n          ($ :footer {:id \"footer\"}\n             ($ :p {} \"Double-click to edit a todo\"))))))\n\n(defn system []\n  (let [sys (new-system)]\n    ((:init sys))\n    sys))\n\n(defn main []\n  (dom/bootstrap system identity clj->js todo-app))"]}